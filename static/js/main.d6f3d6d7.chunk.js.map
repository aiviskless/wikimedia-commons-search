{"version":3,"sources":["utils/SPARQLQueryDispatcher.js","components/SearchResultOption.jsx","components/MediaBox.jsx","App.jsx","consts.js","reportWebVitals.js","index.jsx"],"names":["SPARQLQueryDispatcher","endpoint","this","sparqlQuery","fullUrl","encodeURIComponent","fetch","headers","Accept","then","body","json","SearchResultOption","onClick","option","Box","display","flexDirection","id","label","Typography","variant","description","getFullsizeImage","url","split","getImageFilenameFromWDCFilePath","splitUrl","length","useStyles","makeStyles","root","width","height","margin","title","maxWidth","wordBreak","media","textAlign","cursor","desc","MediaBox","data","image","fileLabel","file","classes","Card","className","small","value","large","alt","CardContent","gutterBottom","component","substr","color","CardActions","Button","size","href","target","App","useState","inputValue","setInputValue","inputSearchResults","setInputSearchResults","entityMediaResults","setEntityMediaResults","loading","setLoading","page","setPage","timer","useRef","wdk","WBK","instance","sparqlEndpoint","handleOnChange","e","current","clearTimeout","setTimeout","searchEntities","response","search","console","log","indexOfLastTodo","indexOfFirstTodo","Autocomplete","freeSolo","options","renderOption","query","results","bindings","handleOnClick","getOptionLabel","filterOptions","x","renderInput","params","TextField","onChange","InputProps","endAdornment","CircularProgress","flexWrap","justifyContent","Children","toArray","slice","map","result","Pagination","count","Math","ceil","event","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.d6f3d6d7.chunk.js","sourcesContent":["class SPARQLQueryDispatcher {\r\n  constructor(endpoint) {\r\n    this.endpoint = endpoint;\r\n  }\r\n\r\n  query(sparqlQuery) {\r\n    const fullUrl = `${this.endpoint}?query=${encodeURIComponent(sparqlQuery)}`;\r\n    const headers = { Accept: 'application/sparql-results+json' };\r\n\r\n    return fetch(fullUrl, { headers }).then((body) => body.json());\r\n  }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst SearchResultOption = ({ onClick, option }) => (\r\n  <Box display=\"flex\" flexDirection=\"column\" onClick={() => onClick(option.id)}>\r\n    <Box>{option.label}</Box>\r\n    <Typography variant=\"caption\">{option.description}</Typography>\r\n  </Box>\r\n);\r\n\r\nexport default SearchResultOption;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ModalImage from 'react-modal-image';\r\n\r\nconst getFullsizeImage = (url) => url.split('?width')[0];\r\n\r\nconst getImageFilenameFromWDCFilePath = (url) => {\r\n  const splitUrl = url.split('/');\r\n\r\n  return getFullsizeImage(splitUrl[splitUrl.length - 1]);\r\n};\r\n\r\nconst formatTitle = (title) => {\r\n  if (title.length > 50) return `${title.substr(0, 50)}...`;\r\n  return title;\r\n};\r\n\r\nconst formatDesc = (desc) => {\r\n  if (desc.length > 150) return `${desc.substr(0, 50)}...`;\r\n  return desc;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 'fit-content',\r\n    height: 'fit-content',\r\n    margin: 16,\r\n  },\r\n\r\n  title: {\r\n    maxWidth: 'fit-content',\r\n    wordBreak: 'break-all',\r\n  },\r\n\r\n  media: {\r\n    textAlign: 'center',\r\n    height: 255,\r\n\r\n    '& img': {\r\n      height: '100%',\r\n      width: 'auto',\r\n    },\r\n\r\n    '& img:hover': {\r\n      cursor: 'zoom-in !important',\r\n    },\r\n\r\n    '& div:first-child': {\r\n      height: '100%',\r\n    },\r\n  },\r\n\r\n  desc: {\r\n    maxWidth: 'fit-content',\r\n  },\r\n});\r\n\r\nconst MediaBox = ({ data: { image, fileLabel, file } }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.media}>\r\n        <ModalImage\r\n          small={image.value}\r\n          large={getFullsizeImage(image.value)}\r\n          alt={file.value}\r\n        />\r\n      </div>\r\n      <CardContent>\r\n        <Typography\r\n          gutterBottom\r\n          component=\"p\"\r\n          className={classes.title}\r\n        >\r\n          {formatTitle(getImageFilenameFromWDCFilePath(image.value))}\r\n        </Typography>\r\n\r\n        {fileLabel?.['xml:lang'] && (\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"textSecondary\"\r\n            component=\"p\"\r\n            className={classes.desc}\r\n          >\r\n            {formatDesc(fileLabel.value)}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={file.value}\r\n          target=\"_blank\"\r\n        >\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MediaBox;\r\n","import './App.css';\nimport React, { Children, useRef, useState } from 'react';\nimport WBK from 'wikibase-sdk';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\nimport SPARQLQueryDispatcher from './utils/SPARQLQueryDispatcher';\nimport SearchResultOption from './components/SearchResultOption';\nimport MediaBox from './components/MediaBox';\nimport {\n  MEDIA_LIMIT, MEDIA_LIMIT_IN_PAGE, TIMEOUT_FOR_SEARCH, WCQS_ENDPOINT,\n} from './consts';\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('');\n  const [inputSearchResults, setInputSearchResults] = useState([]);\n  const [entityMediaResults, setEntityMediaResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const [page, setPage] = useState(1);\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  const timer = useRef(null);\n\n  const wdk = WBK({\n    instance: 'https://www.wikidata.org',\n    sparqlEndpoint: 'https://query.wikidata.org/sparql',\n  });\n\n  const handleOnChange = (e) => {\n    setInputValue(e.target.value);\n\n    if (e?.target?.value?.length < 2) return false;\n\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n\n    timer.current = setTimeout(() => {\n      setLoading(true);\n      const url = wdk.searchEntities(inputValue);\n\n      fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setInputSearchResults(data.search);\n          setLoading(false);\n        });\n    }, TIMEOUT_FOR_SEARCH);\n\n    return true;\n  };\n\n  const handleOnClick = (id) => {\n    setEntityMediaResults([]);\n    setPage(1);\n\n    // SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n    const sparqlQuery = `\n      SELECT ?file ?image ?fileLabel ?thumb WHERE {\n        ?file wdt:P180 wd:${id} .\n        ?file schema:contentUrl ?url .\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)), \"?width=350\")) AS ?image)\n      } limit ${MEDIA_LIMIT}\n    `;\n\n    const queryDispatcher = new SPARQLQueryDispatcher(WCQS_ENDPOINT);\n\n    queryDispatcher.query(sparqlQuery).then((data) => setEntityMediaResults(data.results.bindings));\n  };\n\n  console.log(entityMediaResults, 'entityMediaResults');\n\n  const indexOfLastTodo = page * MEDIA_LIMIT_IN_PAGE;\n  const indexOfFirstTodo = indexOfLastTodo - MEDIA_LIMIT_IN_PAGE;\n\n  return (\n    <div className=\"App\">\n      <Box width={500}>\n        <Autocomplete\n          freeSolo\n          options={[...inputSearchResults]}\n          renderOption={(option) => (\n            <SearchResultOption onClick={() => handleOnClick(option.id)} option={option} />\n          )}\n          getOptionLabel={(option) => option.label}\n          loading={loading}\n          filterOptions={(x) => x}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              onChange={handleOnChange}\n              value={inputValue}\n              label=\"Search Wikimedia Commons\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              InputProps={{\n                ...params.InputProps,\n                endAdornment: (\n                  <>\n                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                    {params.InputProps.endAdornment}\n                  </>\n                ),\n              }}\n            />\n          )}\n        />\n      </Box>\n\n      {entityMediaResults.length && (\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\n          {Children.toArray(\n            entityMediaResults.slice(indexOfFirstTodo, indexOfLastTodo).map((result) => (\n              <MediaBox data={result} />\n            )),\n          )}\n        </Box>\n      )}\n\n      {entityMediaResults.length && (\n        <Pagination\n          count={Math.ceil(entityMediaResults.length / MEDIA_LIMIT_IN_PAGE)}\n          page={page}\n          onChange={handleChange}\n          size=\"large\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// useEffect(() => {\n//   // WIKIMEDIA API THINGY\n//   const url = 'https://api.wikimedia.org/feed/v1/wikipedia/en/featured/2021/04/02';\n//   fetch(url, {\n//     headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n//   })\n//     .then((response) => response.json())\n//     .then(console.log);\n\n// }, []);\n","export const TIMEOUT_FOR_SEARCH = 500;\r\nexport const MEDIA_LIMIT = 100;\r\nexport const MEDIA_LIMIT_IN_PAGE = 8;\r\nexport const WCQS_ENDPOINT = 'https://wcqs-beta.wmflabs.org/sparql';\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CssBaseline } from '@material-ui/core';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}