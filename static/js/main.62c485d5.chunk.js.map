{"version":3,"sources":["utils/SPARQLQueryDispatcher.js","components/SearchResultOption.jsx","components/MediaBox.jsx","App.jsx","consts.js","reportWebVitals.js","index.jsx"],"names":["SPARQLQueryDispatcher","endpoint","this","sparqlQuery","fullUrl","encodeURIComponent","fetch","headers","Accept","then","body","json","SearchResultOption","onClick","option","Box","display","flexDirection","id","Typography","label","variant","description","getFullsizeImage","url","split","getImageFilenameFromWDCFilePath","splitUrl","length","useStyles","makeStyles","root","width","height","margin","padding","title","maxWidth","wordBreak","fontSize","media","textAlign","cursor","desc","MediaBox","data","image","fileLabel","file","classes","Card","className","small","value","large","alt","CardContent","gutterBottom","substr","color","CardActions","Button","size","href","target","wdk","WBK","instance","sparqlEndpoint","App","useState","setValue","inputValue","setInputValue","inputSearchResults","setInputSearchResults","entityMediaResults","setEntityMediaResults","loading","setLoading","noResults","setNoResults","page","setPage","timer","useRef","console","log","indexOfLastTodo","indexOfFirstTodo","useEffect","current","clearTimeout","setTimeout","searchEntities","response","search","Autocomplete","options","renderOption","query","results","bindings","handleOnClick","getOptionSelected","getOptionLabel","filterOptions","x","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","InputProps","endAdornment","CircularProgress","flexWrap","justifyContent","Children","toArray","slice","map","result","Pagination","count","Math","ceil","newPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.62c485d5.chunk.js","sourcesContent":["class SPARQLQueryDispatcher {\r\n  constructor(endpoint) {\r\n    this.endpoint = endpoint;\r\n  }\r\n\r\n  query(sparqlQuery) {\r\n    const fullUrl = `${this.endpoint}?query=${encodeURIComponent(sparqlQuery)}`;\r\n    const headers = { Accept: 'application/sparql-results+json' };\r\n\r\n    return fetch(fullUrl, { headers }).then((body) => body.json());\r\n  }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst SearchResultOption = ({ onClick, option }) => (\r\n  <Box display=\"flex\" flexDirection=\"column\" onClick={() => onClick(option.id)}>\r\n    <Typography>{option.label}</Typography>\r\n    <Typography variant=\"caption\">{option.description}</Typography>\r\n  </Box>\r\n);\r\n\r\nexport default SearchResultOption;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ModalImage from 'react-modal-image';\r\n\r\nconst getFullsizeImage = (url) => url.split('?width')[0];\r\n\r\nconst getImageFilenameFromWDCFilePath = (url) => {\r\n  const splitUrl = url.split('/');\r\n\r\n  return getFullsizeImage(splitUrl[splitUrl.length - 1]);\r\n};\r\n\r\nconst formatTitle = (title) => {\r\n  if (title.length > 50) return `${title.substr(0, 50)}...`;\r\n  return title;\r\n};\r\n\r\nconst formatDesc = (desc) => {\r\n  if (desc.length > 150) return `${desc.substr(0, 50)}...`;\r\n  return desc;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 'fit-content',\r\n    height: 'fit-content',\r\n    margin: 16,\r\n\r\n    '& .MuiCardContent-root': {\r\n      padding: 8,\r\n    },\r\n\r\n    '& .MuiCardActions-root': {\r\n      padding: 4,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    maxWidth: 'fit-content',\r\n    wordBreak: 'break-all',\r\n    fontSize: 14,\r\n  },\r\n\r\n  media: {\r\n    textAlign: 'center',\r\n    height: 150,\r\n\r\n    '& img': {\r\n      height: '100%',\r\n      width: 'auto',\r\n    },\r\n\r\n    '& img:hover': {\r\n      cursor: 'zoom-in !important',\r\n    },\r\n\r\n    '& div:first-child': {\r\n      height: '100%',\r\n    },\r\n  },\r\n\r\n  desc: {\r\n    maxWidth: 'fit-content',\r\n    fontSize: 12,\r\n  },\r\n});\r\n\r\nconst MediaBox = ({ data: { image, fileLabel, file } }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.media}>\r\n        <ModalImage\r\n          small={image.value}\r\n          large={getFullsizeImage(image.value)}\r\n          alt={file.value}\r\n        />\r\n      </div>\r\n      <CardContent>\r\n        <Typography className={classes.title} gutterBottom>\r\n          {formatTitle(getImageFilenameFromWDCFilePath(image.value))}\r\n        </Typography>\r\n\r\n        {fileLabel?.['xml:lang'] && (\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            className={classes.desc}\r\n          >\r\n            {formatDesc(fileLabel.value)}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={file.value}\r\n          target=\"_blank\"\r\n        >\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MediaBox;\r\n","import './App.css';\r\nimport React, {\r\n  Children, useEffect, useRef, useState,\r\n} from 'react';\r\nimport WBK from 'wikibase-sdk';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Box, CircularProgress, Typography } from '@material-ui/core';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport SPARQLQueryDispatcher from './utils/SPARQLQueryDispatcher';\r\nimport SearchResultOption from './components/SearchResultOption';\r\nimport MediaBox from './components/MediaBox';\r\nimport {\r\n  MEDIA_LIMIT, MEDIA_LIMIT_IN_PAGE, TIMEOUT_FOR_SEARCH, WCQS_ENDPOINT,\r\n} from './consts';\r\n\r\nconst wdk = WBK({\r\n  instance: 'https://www.wikidata.org',\r\n  sparqlEndpoint: 'https://query.wikidata.org/sparql',\r\n});\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [inputSearchResults, setInputSearchResults] = useState([]);\r\n  const [entityMediaResults, setEntityMediaResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noResults, setNoResults] = useState(false);\r\n\r\n  const [page, setPage] = useState(1);\r\n\r\n  const handleChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const timer = useRef(null);\r\n\r\n  const handleOnClick = (id) => {\r\n    setEntityMediaResults([]);\r\n    setPage(1);\r\n\r\n    const sparqlQuery = `\r\n      SELECT ?file ?image ?fileLabel ?thumb WHERE {\r\n        ?file wdt:P180 wd:${id} .\r\n        ?file schema:contentUrl ?url .\r\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\r\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)), \"?width=350\")) AS ?image)\r\n      } limit ${MEDIA_LIMIT}\r\n    `;\r\n\r\n    const queryDispatcher = new SPARQLQueryDispatcher(WCQS_ENDPOINT);\r\n\r\n    queryDispatcher.query(sparqlQuery).then((data) => {\r\n      if (data.results.bindings.length === 0) {\r\n        setNoResults(true);\r\n      } else {\r\n        setEntityMediaResults(data.results.bindings);\r\n        setNoResults(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  console.log(entityMediaResults, 'entityMediaResults', inputSearchResults);\r\n\r\n  const indexOfLastTodo = page * MEDIA_LIMIT_IN_PAGE;\r\n  const indexOfFirstTodo = indexOfLastTodo - MEDIA_LIMIT_IN_PAGE;\r\n\r\n  useEffect(() => {\r\n    if (inputValue === '') {\r\n      return undefined;\r\n    }\r\n\r\n    if (timer.current) {\r\n      clearTimeout(timer.current);\r\n    }\r\n\r\n    timer.current = setTimeout(() => {\r\n      setLoading(true);\r\n      const url = wdk.searchEntities(inputValue);\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setInputSearchResults(data.search);\r\n          setLoading(false);\r\n        });\r\n    }, TIMEOUT_FOR_SEARCH);\r\n\r\n    return true;\r\n  }, [inputValue]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Box width={500}>\r\n        <Autocomplete\r\n          id=\"autocomplete\"\r\n          // freeSolo\r\n          // autoComplete\r\n          options={inputSearchResults}\r\n          renderOption={(option) => (\r\n            <SearchResultOption onClick={() => handleOnClick(option.id)} option={option} />\r\n          )}\r\n          // eslint-disable-next-line no-shadow\r\n          getOptionSelected={(option, value) => option.title === value.title}\r\n          getOptionLabel={(option) => option.label}\r\n          loading={loading}\r\n          filterOptions={(x) => x}\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          onInputChange={(event, newInputValue) => {\r\n            setInputValue(newInputValue);\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Search Wikimedia Commons\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <>\r\n                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                    {params.InputProps.endAdornment}\r\n                  </>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </Box>\r\n\r\n      {entityMediaResults.length > 0 && (\r\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\r\n          {Children.toArray(\r\n            entityMediaResults.slice(indexOfFirstTodo, indexOfLastTodo).map((result) => (\r\n              <MediaBox data={result} />\r\n            )),\r\n          )}\r\n        </Box>\r\n      )}\r\n\r\n      {noResults && <Typography>No results...</Typography>}\r\n\r\n      {entityMediaResults.length > 0 && (\r\n        <Pagination\r\n          count={Math.ceil(entityMediaResults.length / MEDIA_LIMIT_IN_PAGE)}\r\n          page={page}\r\n          onChange={handleChange}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// useEffect(() => {\r\n//   // WIKIMEDIA API THINGY\r\n//   const url = 'https://api.wikimedia.org/feed/v1/wikipedia/en/featured/2021/04/02';\r\n//   fetch(url, {\r\n//     headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\r\n//   })\r\n//     .then((response) => response.json())\r\n//     .then(console.log);\r\n\r\n// }, []);\r\n","export const TIMEOUT_FOR_SEARCH = 500;\r\nexport const MEDIA_LIMIT = 100;\r\nexport const MEDIA_LIMIT_IN_PAGE = 16;\r\nexport const WCQS_ENDPOINT = 'https://wcqs-beta.wmflabs.org/sparql';\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CssBaseline } from '@material-ui/core';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}