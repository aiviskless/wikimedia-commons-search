{"version":3,"sources":["consts.js","components/MediaBox.jsx","utils/SPARQLQueryDispatcher.js","components/SearchResultOption.jsx","components/Input.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["NOT_IMAGE_ENCODINGS","getImageFilenameFromWDCFilePath","url","splitUrl","split","getFullsizeImage","length","useStyles","makeStyles","root","height","margin","padding","title","maxWidth","wordBreak","fontSize","isMobile","media","objectFit","cursor","desc","MediaBox","data","thumb","fileLabel","file","encoding","fileOrig","onClick","classes","Card","className","includes","value","controls","width","alt","effect","src","CardContent","Typography","gutterBottom","substr","color","CardActions","Button","size","href","target","SPARQLQueryDispatcher","endpoint","this","sparqlQuery","fullUrl","encodeURIComponent","fetch","headers","Accept","then","body","json","SearchResultOption","option","Box","display","flexDirection","label","variant","description","wdk","WBK","instance","sparqlEndpoint","Input","setNoResults","setEntityMediaResults","useState","loading","setLoading","setValue","inputValue","setInputValue","inputSearchResults","setInputSearchResults","timer","useRef","useEffect","current","clearTimeout","setTimeout","searchEntities","response","search","Autocomplete","clearOnBlur","autoHighlight","options","renderOption","getOptionSelected","getOptionLabel","filterOptions","x","onChange","event","newValue","id","query","results","bindings","onInputChange","newInputValue","renderInput","params","TextField","InputProps","endAdornment","CircularProgress","alignItems","App","entityMediaResults","noResults","selectedImage","setSelectedImage","console","log","flexWrap","justifyContent","Children","toArray","map","result","large","onClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.fbbee655.chunk.js","sourcesContent":["export const TIMEOUT_FOR_SEARCH = 500;\r\nexport const MEDIA_LIMIT = 1000;\r\nexport const MEDIA_LIMIT_IN_PAGE = 100;\r\nexport const WCQS_ENDPOINT = 'https://wcqs-beta.wmflabs.org/sparql';\r\n\r\nexport const NOT_IMAGE_ENCODINGS = [\r\n  'video/webm',\r\n  'video/mpeg',\r\n  'audio/wav',\r\n  'audio/x-flac',\r\n  'audio/mpeg',\r\n  'audio/midi',\r\n  'audio/webm',\r\n  'application/ogg',\r\n];\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nimport { isMobile } from 'react-device-detect';\r\nimport ReactPlayer from 'react-player';\r\nimport { NOT_IMAGE_ENCODINGS } from '../consts';\r\n\r\nconst getFullsizeImage = (url) => url.split('?width')[0];\r\n\r\nconst getImageFilenameFromWDCFilePath = (url) => {\r\n  const splitUrl = url.split('/');\r\n\r\n  return getFullsizeImage(splitUrl[splitUrl.length - 1]);\r\n};\r\n\r\nconst formatTitle = (title) => {\r\n  if (title.length > 50) return `${title.substr(0, 50)}...`;\r\n  return title;\r\n};\r\n\r\nconst formatDesc = (desc) => {\r\n  if (desc.length > 150) return `${desc.substr(0, 50)}...`;\r\n  return desc;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 'fit-content',\r\n    margin: 16,\r\n\r\n    '& .MuiCardContent-root': {\r\n      padding: 8,\r\n    },\r\n\r\n    '& .MuiCardActions-root': {\r\n      padding: 4,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    maxWidth: 'fit-content',\r\n    wordBreak: 'break-all',\r\n    fontSize: isMobile ? 12 : 14,\r\n  },\r\n\r\n  media: {\r\n    '& img': {\r\n      objectFit: 'cover !important',\r\n    },\r\n\r\n    '& img:hover': {\r\n      cursor: 'zoom-in !important',\r\n    },\r\n  },\r\n\r\n  desc: {\r\n    maxWidth: 'fit-content',\r\n    fontSize: isMobile ? 10 : 12,\r\n  },\r\n});\r\n\r\nconst MediaBox = ({\r\n  data: {\r\n    thumb, fileLabel, file, encoding, fileOrig,\r\n  },\r\n  onClick = () => {},\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.media}>\r\n        {NOT_IMAGE_ENCODINGS.includes(encoding.value) ? (\r\n          <ReactPlayer\r\n            controls\r\n            url={fileOrig.value}\r\n            height={isMobile ? 94 : 169}\r\n            width={isMobile ? 125 : 225}\r\n          />\r\n        ) : (\r\n          <LazyLoadImage\r\n            onClick={onClick}\r\n            alt={file.value}\r\n            effect=\"blur\"\r\n            src={thumb.value}\r\n            height={isMobile ? 94 : 169}\r\n            width={isMobile ? 125 : 225}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <CardContent>\r\n        <Typography className={classes.title} gutterBottom>\r\n          {formatTitle(getImageFilenameFromWDCFilePath(fileOrig.value))}\r\n        </Typography>\r\n\r\n        {fileLabel?.['xml:lang'] && (\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            className={classes.desc}\r\n          >\r\n            {formatDesc(fileLabel.value)}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={file.value}\r\n          target=\"_blank\"\r\n        >\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MediaBox;\r\n","class SPARQLQueryDispatcher {\r\n  constructor(endpoint) {\r\n    this.endpoint = endpoint;\r\n  }\r\n\r\n  query(sparqlQuery) {\r\n    const fullUrl = `${this.endpoint}?query=${encodeURIComponent(sparqlQuery)}`;\r\n    const headers = { Accept: 'application/sparql-results+json' };\r\n\r\n    return fetch(fullUrl, { headers }).then((body) => body.json());\r\n  }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst SearchResultOption = ({ onClick, option }) => (\r\n  <Box display=\"flex\" flexDirection=\"column\" onClick={onClick}>\r\n    <Typography>{option.label}</Typography>\r\n    <Typography variant=\"caption\">{option.description}</Typography>\r\n  </Box>\r\n);\r\n\r\nexport default SearchResultOption;\r\n","import React, {\r\n  useEffect, useRef, useState,\r\n} from 'react';\r\nimport WBK from 'wikibase-sdk';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {\r\n  Box, CircularProgress,\r\n} from '@material-ui/core';\r\nimport { isMobile } from 'react-device-detect';\r\nimport SPARQLQueryDispatcher from '../utils/SPARQLQueryDispatcher';\r\nimport SearchResultOption from './SearchResultOption';\r\nimport {\r\n  MEDIA_LIMIT, TIMEOUT_FOR_SEARCH, WCQS_ENDPOINT,\r\n} from '../consts';\r\n\r\nconst wdk = WBK({\r\n  instance: 'https://www.wikidata.org',\r\n  sparqlEndpoint: 'https://query.wikidata.org/sparql',\r\n});\r\n\r\nconst Input = ({ setNoResults, setEntityMediaResults }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [value, setValue] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [inputSearchResults, setInputSearchResults] = useState([]);\r\n\r\n  const timer = useRef(null);\r\n\r\n  const handleOnValueChange = (event, newValue) => {\r\n    setValue(newValue);\r\n\r\n    if (!newValue) return false;\r\n\r\n    setEntityMediaResults([]);\r\n\r\n    const sparqlQuery = `\r\n      SELECT ?file ?thumb ?fileOrig ?fileLabel ?encoding WHERE {\r\n        ?file wdt:P180 wd:${newValue.id} .\r\n        ?file schema:contentUrl ?url .\r\n        ?file schema:encodingFormat ?encoding .\r\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\r\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)), \"?width=${isMobile ? 100 : 200}\")) AS ?thumb)\r\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)))) AS ?fileOrig)\r\n      } limit ${MEDIA_LIMIT}\r\n    `;\r\n\r\n    const queryDispatcher = new SPARQLQueryDispatcher(WCQS_ENDPOINT);\r\n\r\n    queryDispatcher.query(sparqlQuery).then((data) => {\r\n      if (data.results.bindings.length === 0) {\r\n        setNoResults(true);\r\n      } else {\r\n        setEntityMediaResults(data.results.bindings);\r\n        setNoResults(false);\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inputValue === '') {\r\n      setNoResults(false);\r\n      return undefined;\r\n    }\r\n\r\n    if (timer.current) {\r\n      clearTimeout(timer.current);\r\n    }\r\n\r\n    timer.current = setTimeout(() => {\r\n      setLoading(true);\r\n      const url = wdk.searchEntities(inputValue);\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setInputSearchResults(data.search);\r\n          setLoading(false);\r\n        });\r\n    }, TIMEOUT_FOR_SEARCH);\r\n\r\n    return true;\r\n  }, [inputValue, setNoResults]);\r\n\r\n  return (\r\n    <Box maxWidth={500} width=\"100%\">\r\n      <Autocomplete\r\n        clearOnBlur={false}\r\n        autoHighlight\r\n        options={inputSearchResults}\r\n        renderOption={(option) => <SearchResultOption option={option} />}\r\n        // eslint-disable-next-line no-shadow\r\n        getOptionSelected={(option, value) => option.title === value.title}\r\n        getOptionLabel={(option) => option.label}\r\n        loading={loading}\r\n        filterOptions={(x) => x}\r\n        value={value}\r\n        onChange={handleOnValueChange}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search Wikimedia Commons\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {inputSearchResults.length > 0 ? params.InputProps.endAdornment : null}\r\n                </>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { Children, useState } from 'react';\r\nimport {\r\n  Box, makeStyles, Typography,\r\n} from '@material-ui/core';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { Lightbox } from 'react-modal-image';\r\nimport MediaBox from './components/MediaBox';\r\nimport Input from './components/Input';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: isMobile ? '10px' : '25px 50px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [entityMediaResults, setEntityMediaResults] = useState([]);\r\n  const [noResults, setNoResults] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(false);\r\n\r\n  const closeLightbox = () => {\r\n    setSelectedImage(false);\r\n  };\r\n\r\n  console.log(entityMediaResults, 'entityMediaResults');\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Input setNoResults={setNoResults} setEntityMediaResults={setEntityMediaResults} />\r\n\r\n      {entityMediaResults.length > 0 && (\r\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\r\n          {Children.toArray(entityMediaResults.map((result) => (\r\n            <MediaBox data={result} onClick={() => setSelectedImage(result)} />\r\n          )))}\r\n        </Box>\r\n      )}\r\n\r\n      {noResults && <Typography>No results...</Typography>}\r\n\r\n      {selectedImage && (\r\n        <Lightbox\r\n          large={selectedImage.fileOrig.value}\r\n          alt={selectedImage.file.value}\r\n          onClose={closeLightbox}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CssBaseline } from '@material-ui/core';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}