{"version":3,"sources":["utils/SPARQLQueryDispatcher.js","components/SearchResultOption.jsx","consts.js","components/MediaBox.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["SPARQLQueryDispatcher","endpoint","this","sparqlQuery","fullUrl","encodeURIComponent","fetch","headers","Accept","then","body","json","SearchResultOption","onClick","option","Box","display","flexDirection","id","Typography","label","variant","description","NOT_IMAGE_ENCODINGS","getImageFilenameFromWDCFilePath","url","splitUrl","split","getFullsizeImage","length","useStyles","makeStyles","root","width","height","margin","padding","title","maxWidth","wordBreak","fontSize","isMobile","media","objectFit","cursor","desc","MediaBox","data","thumb","fileLabel","file","encoding","fileOrig","classes","Card","className","includes","value","controls","alt","effect","src","CardContent","gutterBottom","substr","color","CardActions","Button","size","href","target","alignItems","wdk","WBK","instance","sparqlEndpoint","App","useState","setValue","inputValue","setInputValue","inputSearchResults","setInputSearchResults","entityMediaResults","setEntityMediaResults","loading","setLoading","noResults","setNoResults","selectedImage","setSelectedImage","timer","useRef","console","log","useEffect","current","clearTimeout","setTimeout","searchEntities","response","search","Autocomplete","options","renderOption","query","results","bindings","handleOnClick","getOptionSelected","getOptionLabel","filterOptions","x","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","InputProps","endAdornment","CircularProgress","flexWrap","justifyContent","Children","toArray","map","result","large","onClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.836188de.chunk.js","sourcesContent":["class SPARQLQueryDispatcher {\r\n  constructor(endpoint) {\r\n    this.endpoint = endpoint;\r\n  }\r\n\r\n  query(sparqlQuery) {\r\n    const fullUrl = `${this.endpoint}?query=${encodeURIComponent(sparqlQuery)}`;\r\n    const headers = { Accept: 'application/sparql-results+json' };\r\n\r\n    return fetch(fullUrl, { headers }).then((body) => body.json());\r\n  }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst SearchResultOption = ({ onClick, option }) => (\r\n  <Box display=\"flex\" flexDirection=\"column\" onClick={() => onClick(option.id)}>\r\n    <Typography>{option.label}</Typography>\r\n    <Typography variant=\"caption\">{option.description}</Typography>\r\n  </Box>\r\n);\r\n\r\nexport default SearchResultOption;\r\n","export const TIMEOUT_FOR_SEARCH = 500;\r\nexport const MEDIA_LIMIT = 1000;\r\nexport const MEDIA_LIMIT_IN_PAGE = 100;\r\nexport const WCQS_ENDPOINT = 'https://wcqs-beta.wmflabs.org/sparql';\r\n\r\nexport const NOT_IMAGE_ENCODINGS = [\r\n  'video/webm',\r\n  'video/mpeg',\r\n  'audio/wav',\r\n  'audio/x-flac',\r\n  'audio/mpeg',\r\n  'audio/midi',\r\n  'audio/webm',\r\n  'application/ogg',\r\n];\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nimport { isMobile } from 'react-device-detect';\r\nimport ReactPlayer from 'react-player';\r\nimport { NOT_IMAGE_ENCODINGS } from '../consts';\r\n\r\nconst getFullsizeImage = (url) => url.split('?width')[0];\r\n\r\nconst getImageFilenameFromWDCFilePath = (url) => {\r\n  const splitUrl = url.split('/');\r\n\r\n  return getFullsizeImage(splitUrl[splitUrl.length - 1]);\r\n};\r\n\r\nconst formatTitle = (title) => {\r\n  if (title.length > 50) return `${title.substr(0, 50)}...`;\r\n  return title;\r\n};\r\n\r\nconst formatDesc = (desc) => {\r\n  if (desc.length > 150) return `${desc.substr(0, 50)}...`;\r\n  return desc;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 'fit-content',\r\n    height: 'fit-content',\r\n    margin: 16,\r\n\r\n    '& .MuiCardContent-root': {\r\n      padding: 8,\r\n    },\r\n\r\n    '& .MuiCardActions-root': {\r\n      padding: 4,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    maxWidth: 'fit-content',\r\n    wordBreak: 'break-all',\r\n    fontSize: isMobile ? 12 : 14,\r\n  },\r\n\r\n  media: {\r\n    // textAlign: 'center',\r\n\r\n    '& img': {\r\n      objectFit: 'cover !important',\r\n    },\r\n\r\n    '& img:hover': {\r\n      cursor: 'zoom-in !important',\r\n    },\r\n\r\n    // '& div:first-child': {\r\n    //   height: '100%',\r\n    // },\r\n  },\r\n\r\n  desc: {\r\n    maxWidth: 'fit-content',\r\n    fontSize: isMobile ? 10 : 12,\r\n  },\r\n});\r\n\r\nconst MediaBox = ({\r\n  data: {\r\n    thumb, fileLabel, file, encoding, fileOrig,\r\n  },\r\n  onClick = () => {},\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.media}>\r\n        {NOT_IMAGE_ENCODINGS.includes(encoding.value) ? (\r\n          <ReactPlayer\r\n            controls\r\n            url={fileOrig.value}\r\n            height={isMobile ? 94 : 169}\r\n            width={isMobile ? 125 : 225}\r\n          />\r\n        ) : (\r\n          <LazyLoadImage\r\n            onClick={onClick}\r\n            alt={file.value}\r\n            effect=\"blur\"\r\n            src={thumb.value}\r\n            height={isMobile ? 94 : 169}\r\n            width={isMobile ? 125 : 225}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <CardContent>\r\n        <Typography className={classes.title} gutterBottom>\r\n          {formatTitle(getImageFilenameFromWDCFilePath(fileOrig.value))}\r\n        </Typography>\r\n\r\n        {fileLabel?.['xml:lang'] && (\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            className={classes.desc}\r\n          >\r\n            {formatDesc(fileLabel.value)}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={file.value}\r\n          target=\"_blank\"\r\n        >\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MediaBox;\r\n","import React, {\r\n  Children, useEffect, useRef, useState,\r\n} from 'react';\r\nimport WBK from 'wikibase-sdk';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {\r\n  Box, CircularProgress, makeStyles, Typography,\r\n} from '@material-ui/core';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { Lightbox } from 'react-modal-image';\r\nimport SPARQLQueryDispatcher from './utils/SPARQLQueryDispatcher';\r\nimport SearchResultOption from './components/SearchResultOption';\r\nimport MediaBox from './components/MediaBox';\r\nimport {\r\n  MEDIA_LIMIT, TIMEOUT_FOR_SEARCH, WCQS_ENDPOINT,\r\n} from './consts';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: isMobile ? '10px' : '25px 50px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nconst wdk = WBK({\r\n  instance: 'https://www.wikidata.org',\r\n  sparqlEndpoint: 'https://query.wikidata.org/sparql',\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [inputSearchResults, setInputSearchResults] = useState([]);\r\n  const [entityMediaResults, setEntityMediaResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noResults, setNoResults] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(false);\r\n\r\n  const timer = useRef(null);\r\n\r\n  const handleOnClick = (id) => {\r\n    setEntityMediaResults([]);\r\n\r\n    const sparqlQuery = `\r\n      SELECT ?file ?thumb ?fileOrig ?fileLabel ?encoding WHERE {\r\n        ?file wdt:P180 wd:${id} .\r\n        ?file schema:contentUrl ?url .\r\n        ?file schema:encodingFormat ?encoding .\r\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\r\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)), \"?width=${isMobile ? 100 : 200}\")) AS ?thumb)\r\n        bind(iri(concat(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", wikibase:decodeUri(substr(str(?url),53)))) AS ?fileOrig)\r\n      } limit ${MEDIA_LIMIT}\r\n    `;\r\n\r\n    const queryDispatcher = new SPARQLQueryDispatcher(WCQS_ENDPOINT);\r\n\r\n    queryDispatcher.query(sparqlQuery).then((data) => {\r\n      if (data.results.bindings.length === 0) {\r\n        setNoResults(true);\r\n      } else {\r\n        setEntityMediaResults(data.results.bindings);\r\n        setNoResults(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const closeLightbox = () => {\r\n    setSelectedImage(false);\r\n  };\r\n\r\n  console.log(entityMediaResults, 'entityMediaResults', inputSearchResults);\r\n\r\n  useEffect(() => {\r\n    if (inputValue === '') {\r\n      return undefined;\r\n    }\r\n\r\n    if (timer.current) {\r\n      clearTimeout(timer.current);\r\n    }\r\n\r\n    timer.current = setTimeout(() => {\r\n      setLoading(true);\r\n      const url = wdk.searchEntities(inputValue);\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setInputSearchResults(data.search);\r\n          setLoading(false);\r\n        });\r\n    }, TIMEOUT_FOR_SEARCH);\r\n\r\n    return true;\r\n  }, [inputValue]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box maxWidth={500} width=\"100%\">\r\n        <Autocomplete\r\n          id=\"autocomplete\"\r\n          // freeSolo\r\n          // autoComplete\r\n          options={inputSearchResults}\r\n          renderOption={(option) => (\r\n            <SearchResultOption onClick={() => handleOnClick(option.id)} option={option} />\r\n          )}\r\n          // eslint-disable-next-line no-shadow\r\n          getOptionSelected={(option, value) => option.title === value.title}\r\n          getOptionLabel={(option) => option.label}\r\n          loading={loading}\r\n          filterOptions={(x) => x}\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          onInputChange={(event, newInputValue) => {\r\n            setInputValue(newInputValue);\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Search Wikimedia Commons\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <>\r\n                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                    {inputSearchResults.length > 0 ? params.InputProps.endAdornment : null}\r\n                  </>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </Box>\r\n\r\n      {entityMediaResults.length > 0 && (\r\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\r\n          {Children.toArray(entityMediaResults.map((result) => (\r\n            <MediaBox data={result} onClick={() => setSelectedImage(result)} />\r\n          )))}\r\n        </Box>\r\n      )}\r\n\r\n      {noResults && <Typography>No results...</Typography>}\r\n\r\n      {selectedImage && (\r\n        <Lightbox\r\n          large={selectedImage.fileOrig.value}\r\n          alt={selectedImage.file.value}\r\n          onClose={closeLightbox}\r\n        />\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CssBaseline } from '@material-ui/core';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}